//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 0 files.
  struct file {
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 11 images.
  struct image {
    /// Image `chat_back`.
    static let chat_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "chat_back")
    /// Image `chat_images`.
    static let chat_images = Rswift.ImageResource(bundle: R.hostingBundle, name: "chat_images")
    /// Image `chat_keyboard`.
    static let chat_keyboard = Rswift.ImageResource(bundle: R.hostingBundle, name: "chat_keyboard")
    /// Image `chat_send`.
    static let chat_send = Rswift.ImageResource(bundle: R.hostingBundle, name: "chat_send")
    /// Image `chat`.
    static let chat = Rswift.ImageResource(bundle: R.hostingBundle, name: "chat")
    /// Image `close_menu`.
    static let close_menu = Rswift.ImageResource(bundle: R.hostingBundle, name: "close_menu")
    /// Image `menu_robot`.
    static let menu_robot = Rswift.ImageResource(bundle: R.hostingBundle, name: "menu_robot")
    /// Image `menu_settings`.
    static let menu_settings = Rswift.ImageResource(bundle: R.hostingBundle, name: "menu_settings")
    /// Image `menu_theme`.
    static let menu_theme = Rswift.ImageResource(bundle: R.hostingBundle, name: "menu_theme")
    /// Image `menu`.
    static let menu = Rswift.ImageResource(bundle: R.hostingBundle, name: "menu")
    /// Image `robot`.
    static let robot = Rswift.ImageResource(bundle: R.hostingBundle, name: "robot")
    
    /// `UIImage(named: "chat", bundle: ..., traitCollection: ...)`
    static func chat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chat, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "chat_back", bundle: ..., traitCollection: ...)`
    static func chat_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chat_back, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "chat_images", bundle: ..., traitCollection: ...)`
    static func chat_images(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chat_images, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "chat_keyboard", bundle: ..., traitCollection: ...)`
    static func chat_keyboard(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chat_keyboard, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "chat_send", bundle: ..., traitCollection: ...)`
    static func chat_send(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chat_send, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "close_menu", bundle: ..., traitCollection: ...)`
    static func close_menu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.close_menu, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "menu", bundle: ..., traitCollection: ...)`
    static func menu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "menu_robot", bundle: ..., traitCollection: ...)`
    static func menu_robot(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_robot, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "menu_settings", bundle: ..., traitCollection: ...)`
    static func menu_settings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_settings, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "menu_theme", bundle: ..., traitCollection: ...)`
    static func menu_theme(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_theme, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "robot", bundle: ..., traitCollection: ...)`
    static func robot(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.robot, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 4 nibs.
  struct nib {
    /// Nib `LaunchViewController`.
    static let launchViewController = _R.nib._LaunchViewController()
    /// Nib `MenuContentView`.
    static let menuContentView = _R.nib._MenuContentView()
    /// Nib `ProfileHeaderView`.
    static let profileHeaderView = _R.nib._ProfileHeaderView()
    /// Nib `ThemePickerView`.
    static let themePickerView = _R.nib._ThemePickerView()
    
    /// `UINib(name: "LaunchViewController", in: bundle)`
    static func launchViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.launchViewController)
    }
    
    /// `UINib(name: "MenuContentView", in: bundle)`
    static func menuContentView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.menuContentView)
    }
    
    /// `UINib(name: "ProfileHeaderView", in: bundle)`
    static func profileHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.profileHeaderView)
    }
    
    /// `UINib(name: "ThemePickerView", in: bundle)`
    static func themePickerView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.themePickerView)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 0 reuse identifiers.
  struct reuseIdentifier {
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _MenuContentView.validate()
      try _LaunchViewController.validate()
    }
    
    struct _LaunchViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "LaunchViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> LaunchViewController? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LaunchViewController
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "robot", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'robot' is used in nib 'LaunchViewController', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _MenuContentView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MenuContentView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> _MenuContentView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? _MenuContentView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "menu_robot", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'menu_robot' is used in nib 'MenuContentView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "menu_theme", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'menu_theme' is used in nib 'MenuContentView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "menu_settings", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'menu_settings' is used in nib 'MenuContentView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _ProfileHeaderView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ProfileHeaderView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _ThemePickerView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ThemePickerView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> _ThemePickerView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? _ThemePickerView
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard {
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
